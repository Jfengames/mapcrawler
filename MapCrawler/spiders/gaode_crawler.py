#!/usr/bin/python3
#coding=utf-8

import scrapy
from scrapy.exceptions import CloseSpider
from urllib import parse
import json
import os

from MapCrawler.items import PoiInfoItem
from MapCrawler.database_operations import GaodeMapSceneDbOper

import logging
logger = logging.getLogger(__name__)

from MapCrawler.toolskit import generate_city_grids
from MapCrawler.config import KEYS


class GaodeCrawler(scrapy.Spider):
    name = 'GaoDe'

    urls_prex ='http://restapi.amap.com/v3/place/polygon'
    search_url = 'https://ditu.amap.com/detail/get/detail'

    items_crawled = 0

    grid_num = 0
    start_crawl_grid_file = 'start_grid.json'
    start_grid = 0

    def start_requests(self):
        """
        先爬取1km×1km的方格
        :return:
        """
        # jinshui_adcode='410105' #金水区的adcode
        # start_long_lat = '34.808881,113.652670'
        # resolution = 0.01 # 直接加到经纬度上，大概1km
        self.db= GaodeMapSceneDbOper()
        self.keys = self._next_key()
        self.key_using = self.next_key()
        try:
            fh = open(self.start_crawl_grid_file, 'r')
            _start = json.load(fh)
            self.start_grid = _start['start_grid']
            self.city_adcode = _start['CITY_ADCODE']
            self.resolution = _start['resolution']
        except Exception as e:
            logger.error('爬虫城市和起始网格未配置：%s'%e)
            self.city_adcode = 'XXXXXX'
            self.start_grid = 0
            self.resolution = 0.01
            raise CloseSpider('爬虫城市和起始网格未配置')


        CITY_POLYLINE= GaodeMapSceneDbOper().select_city_polyline(self.city_adcode)
        # CITY_POLYLINE ='116.387663,39.960923;116.389479,39.961038;116.389506,39.963147;116.392385,39.963169;116.392514,39.963128;116.392658,39.963171;116.393041,39.963174;116.393126,39.963147;116.393199,39.963175;116.39429,39.963183;116.394675,39.963195;116.394796,39.963195;116.394822,39.963195;116.394926,39.963198;116.395046,39.963158;116.395105,39.963218;116.395179,39.963191;116.396959,39.963204;116.398227,39.962532;116.398739,39.962562;116.398852,39.96238;116.399703,39.962389;116.40045,39.962051;116.401301,39.962082;116.401449,39.962424;116.402682,39.962433;116.403671,39.961848;116.404192,39.961891;116.40447,39.961891;116.405477,39.96187;116.405486,39.962256;116.407873,39.962178;116.407778,39.965139;116.407743,39.96608;116.407718,39.966562;116.407666,39.966909;116.407553,39.967352;116.407483,39.96763;116.407466,39.967951;116.407388,39.969661;116.407362,39.970204;116.407406,39.970477;116.407484,39.970824;116.407545,39.971085;116.407571,39.97135;116.407579,39.971654;116.40751,39.974002;116.409359,39.974036;116.409341,39.97253;116.408821,39.972496;116.408786,39.971462;116.411095,39.971454;116.411227,39.968831;116.411233,39.968785;116.411232,39.968779;116.411231,39.96875;116.411424,39.96493;116.412161,39.964943;116.412187,39.96378;116.41414,39.963809;116.4142,39.962178;116.415382,39.962151;116.416237,39.962199;116.42487,39.962285;116.424951,39.962251;116.425011,39.962209;116.425094,39.962209;116.425148,39.962166;116.425338,39.962085;116.425433,39.959164;116.427316,39.959195;116.427369,39.959175;116.427408,39.959196;116.429417,39.959229;116.429497,39.959216;116.429585,39.959231;116.430514,39.959247;116.430618,39.95656;116.429829,39.956534;116.429803,39.957255;116.429005,39.957269;116.429161,39.956774;116.429196,39.956327;116.429204,39.955649;116.428996,39.955624;116.429022,39.954278;116.429289,39.9543;116.429357,39.954303;116.429386,39.954298;116.429387,39.954281;116.42939,39.95423;116.429421,39.953544;116.429551,39.953535;116.42949,39.951851;116.429967,39.951864;116.429967,39.951782;116.430201,39.951786;116.430218,39.951291;116.429897,39.951291;116.429889,39.951013;116.429499,39.951014;116.429048,39.95107;116.429056,39.950506;116.429464,39.950432;116.429481,39.950163;116.432299,39.950178;116.433053,39.950177;116.433486,39.950141;116.433772,39.950059;116.433998,39.949937;116.434101,39.949754;116.434153,39.949498;116.434174,39.94942;116.434206,39.949388;116.434205,39.949307;116.434361,39.949068;116.434821,39.949038;116.435098,39.949232;116.436701,39.949248;116.436701,39.949348;116.436735,39.949359;116.436806,39.949387;116.436797,39.949691;116.436415,39.949747;116.436216,39.949817;116.43574,39.950799;116.436017,39.950846;116.435457,39.952037;116.435417,39.952087;116.435419,39.952118;116.435836,39.952119;116.435887,39.952143;116.435971,39.952121;116.439074,39.952166;116.439951,39.952135;116.440281,39.949689;116.442244,39.949701;116.442325,39.947158;116.440751,39.945772;116.440546,39.945357;116.440557,39.945301;116.440799,39.945228;116.441059,39.945149;116.441276,39.945105;116.441588,39.945057;116.44177,39.945035;116.441909,39.945044;116.442021,39.945078;116.442117,39.945143;116.442272,39.945299;116.442506,39.945585;116.442576,39.945659;116.442645,39.945706;116.443538,39.946178;116.443641,39.946209;116.443841,39.946226;116.444334,39.946247;116.444672,39.946246;116.446344,39.9462;116.446561,39.946169;116.446708,39.946112;116.446838,39.945986;116.446933,39.945721;116.447063,39.945478;116.44721,39.945282;116.447271,39.945157;116.447271,39.945026;116.447236,39.944918;116.447158,39.944762;116.446838,39.943816;116.446551,39.94297;116.446473,39.942792;116.446439,39.942749;116.446387,39.942658;116.4463,39.942567;116.446179,39.94248;116.446058,39.942416;116.444949,39.941827;116.444784,39.941623;116.444689,39.941237;116.444611,39.94079;116.444557,39.940084;116.444552,39.940022;116.444548,39.939969;116.444541,39.939883;116.444541,39.939154;116.444466,39.938698;116.444482,39.938675;116.444496,39.938649;116.444455,39.938421;116.444203,39.937887;116.443752,39.936924;116.443709,39.936668;116.443747,39.933882;116.443759,39.933781;116.443751,39.933671;116.443751,39.933607;116.443752,39.933526;116.443722,39.931473;116.443722,39.931442;116.443722,39.931423;116.443716,39.931042;116.443707,39.930969;116.443714,39.930897;116.443682,39.928669;116.443634,39.92869;116.44356,39.928672;116.442158,39.928717;116.442141,39.928727;116.442123,39.928718;116.441207,39.928748;116.441166,39.928727;116.441111,39.928751;116.44026,39.928778;116.439134,39.928484;116.439084,39.928518;116.439056,39.928511;116.439022,39.928561;116.438995,39.92858;116.439004,39.928966;116.438051,39.928981;116.438042,39.929571;116.437132,39.929598;116.437478,39.928595;116.43695,39.928587;116.436933,39.929494;116.434272,39.929536;116.434488,39.924518;116.434652,39.921168;116.434808,39.917226;116.434911,39.915273;116.434989,39.913958;116.435041,39.913641;116.435084,39.913358;116.435569,39.911326;116.435648,39.910901;116.435673,39.910515;116.435751,39.908227;116.435838,39.906838;116.435959,39.905536;116.436322,39.90363;116.436452,39.902618;116.436478,39.902198;116.436478,39.902046;116.43679,39.902014;116.43718,39.902331;116.437431,39.902491;116.437666,39.902578;116.437995,39.902612;116.438697,39.902594;116.439875,39.902644;116.440196,39.902661;116.440542,39.902721;116.441574,39.903019;116.441963,39.903097;116.443064,39.903182;116.443809,39.903224;116.444684,39.903214;116.446087,39.903151;116.446538,39.903151;116.447022,39.903159;116.44872,39.903242;116.449066,39.90125;116.448027,39.901234;116.445879,39.901034;116.445965,39.900061;116.446823,39.900042;116.446831,39.899619;116.446808,39.899577;116.446833,39.899542;116.446857,39.898341;116.446805,39.898098;116.446831,39.89746;116.447004,39.897059;116.44716,39.894186;116.450875,39.894089;116.450866,39.892865;116.452391,39.892866;116.452389,39.89281;116.45235,39.892784;116.452388,39.892728;116.452373,39.891981;116.451013,39.891962;116.450935,39.890243;116.450381,39.890244;116.450017,39.890449;116.448311,39.890504;116.448199,39.890712;116.447393,39.890804;116.447359,39.891152;116.446986,39.891205;116.446934,39.891517;116.445903,39.891519;116.445964,39.890148;116.444067,39.890038;116.444179,39.889017;116.444707,39.884858;116.444727,39.884736;116.44473,39.884709;116.444736,39.884684;116.445339,39.881003;116.445642,39.879279;116.445642,39.878901;116.445616,39.878576;116.445538,39.878207;116.445373,39.877795;116.444463,39.876156;116.444256,39.875752;116.444117,39.875362;116.443926,39.874416;116.44364,39.872846;116.443588,39.872563;116.44351,39.872312;116.443363,39.872104;116.443198,39.871995;116.44299,39.871917;116.442791,39.871887;116.442574,39.871879;116.44085,39.871942;116.435209,39.872176;116.426948,39.872696;116.42569,39.872805;116.425109,39.872828;116.42321,39.872829;116.422794,39.872699;116.422022,39.8724;116.421414,39.872175;116.420469,39.871949;116.419871,39.871828;116.419298,39.87175;116.416869,39.871473;116.416903,39.871187;116.413658,39.87114;116.413667,39.869825;116.415828,39.869824;116.415827,39.86936;116.415046,39.869334;116.415046,39.868835;116.415133,39.868761;116.415194,39.868644;116.415228,39.867064;116.415679,39.867077;116.415688,39.866851;116.416755,39.866886;116.416677,39.86574;116.415827,39.865766;116.415896,39.863644;116.415818,39.8635;116.415106,39.863466;116.415081,39.863678;116.414404,39.863709;116.414369,39.864034;116.413961,39.864035;116.414143,39.860141;116.413523,39.860128;116.413469,39.860086;116.413406,39.860126;116.412433,39.860107;116.412447,39.85914;116.412415,39.859087;116.412449,39.859043;116.412451,39.858935;116.410619,39.858874;116.408224,39.858913;116.406861,39.859964;116.406767,39.859945;116.406713,39.859949;116.404848,39.859765;116.404755,39.859735;116.403686,39.859664;116.403645,39.859692;116.403006,39.859698;116.401532,39.859709;116.401498,39.859709;116.401458,39.859709;116.40069,39.859714;116.40061,39.859681;116.400518,39.859716;116.399472,39.859723;116.399515,39.858625;116.395503,39.858679;116.395501,39.858812;116.395547,39.858854;116.3955,39.858904;116.395486,39.860047;116.395451,39.861106;116.395364,39.861436;116.39528,39.861581;116.395156,39.861796;116.394982,39.862121;116.394948,39.862286;116.394956,39.862733;116.394565,39.862733;116.394279,39.862733;116.394279,39.862585;116.394279,39.862286;116.393731,39.862294;116.392993,39.862307;116.392976,39.863739;116.392264,39.863695;116.391318,39.863694;116.391302,39.863694;116.391289,39.863811;116.391265,39.865444;116.387702,39.865393;116.387815,39.865775;116.387868,39.866044;116.387894,39.866279;116.387911,39.866513;116.387894,39.867377;116.385339,39.866776;116.385269,39.867066;116.384192,39.866531;116.383383,39.866231;116.382567,39.866065;116.381602,39.866017;116.380681,39.866054;116.380696,39.866027;116.38064,39.86606;116.379803,39.866201;116.379402,39.866276;116.379361,39.866259;116.379309,39.866293;116.378551,39.866434;116.378142,39.866551;116.377995,39.86659;116.377664,39.86668;116.37736,39.866693;116.377134,39.866693;116.377282,39.866767;116.377856,39.866928;116.378734,39.867025;116.378716,39.867268;116.378646,39.867463;116.378621,39.867689;116.379171,39.867745;116.379213,39.867742;116.379246,39.867753;116.379603,39.867789;116.379603,39.867944;116.379691,39.867965;116.379967,39.867958;116.380559,39.867942;116.380516,39.869336;116.38069,39.869614;116.380586,39.871146;116.384836,39.87148;116.386435,39.871582;116.387972,39.871665;116.388022,39.871669;116.388063,39.871669;116.392543,39.871912;116.3991,39.872202;116.399018,39.873922;116.399047,39.874204;116.398995,39.874418;116.398719,39.880214;116.398468,39.880214;116.398442,39.881096;116.398598,39.881078;116.398581,39.882537;116.398434,39.886365;116.39813,39.890983;116.39787,39.89604;116.397706,39.898496;116.397697,39.898579;116.397662,39.898639;116.397602,39.898674;116.397419,39.898722;116.396664,39.898938;116.396394,39.899051;116.396238,39.899212;116.39609,39.899446;116.396021,39.899706;116.39603,39.900084;116.395891,39.901863;116.395813,39.902905;116.395562,39.907992;116.392252,39.907882;116.392374,39.908294;116.392695,39.908668;116.392689,39.909533;116.392689,39.90956;116.392689,39.909573;116.392678,39.91122;116.391836,39.911232;116.391879,39.912052;116.391983,39.912087;116.391957,39.9124;116.392096,39.912426;116.392062,39.912891;116.392635,39.912921;116.392567,39.914729;116.392556,39.914777;116.392564,39.914806;116.392548,39.915208;116.392185,39.922427;116.396823,39.922529;116.396807,39.923095;116.396754,39.923122;116.396823,39.923164;116.396823,39.92327;116.396784,39.923302;116.396823,39.923358;116.396823,39.923467;116.399464,39.923568;116.39923,39.928129;116.399074,39.928286;116.398821,39.928359;116.396702,39.928311;116.396166,39.94006;116.395988,39.940148;116.395947,39.940206;116.395898,39.940191;116.395149,39.940559;116.394949,39.940606;116.394272,39.940632;116.394203,39.944265;116.393969,39.95048;116.393727,39.957369;116.386776,39.957016;116.387368,39.959486;116.387663,39.960923'

        parameters = {
            # 'polygon':'113.652670,34.808881,113.642670,34.798881',
            'types':'120000',# 居民区
            'offset':20,#每页最大数据
            'key':self.key_using

            # 'children':1,
            # 'city':'郑州',
            # 'citylimit':'true'
        }

        city_grids = generate_city_grids(CITY_POLYLINE, self.resolution)


        for grid in city_grids:
            if self.grid_num < self.start_grid:
                # 小于栅格起始数，跳过
                self.grid_num += 1
                continue

            logger.info('请求第%s个网格'%self.grid_num)
            self.grid_num+=1
            parameters['polygon']= ','.join([str(i) for i in grid])
            url = '%s?%s'%(self.urls_prex,parse.urlencode(parameters))
            # logger.info('产生区域搜索请求：%s'%url)
            yield scrapy.Request(url,callback=self.parse_region_pois)


    def parse_region_pois(self,response):
        """
        通过区域搜索，解析目标POI，并yiele对应目标POI的请求
        :param response:
        :return:
        """
        res = json.loads(response.text)
        if res['status'] == '0':
            if res['info'] == 'DAILY_QUERY_OVER_LIMIT':
                # with open(self.start_crawl_grid_file, 'w') as fh:
                #     json.dump({'start_grid':self.start_grid},fh)

                raise CloseSpider('所有Key都已超限')
            logger.error('返回数据有误')


        _url,_para = response.url.split('?')
        query_para = parse.parse_qsl(_para)
        query_para = dict(query_para)
        parameters = {
            # 'key':query_para['key'],
            'citylimit':'true',
        }

        for poi in res.get('pois'):
            if self.db.is_item_exist_by_id_city_adcode(poi['id'],self.city_adcode)\
                    and not self.db.is_shape_null(poi['id']):
                continue

            # 生成每个poi的搜索url
            add_para = {'keywords':poi['name'],
                        'city':poi['cityname'],
                        'citylimit':'true',
                        'id':poi['id']}
            add_para.update(parameters)
            poi_url = '%s?%s'%(self.search_url,parse.urlencode(add_para))

            yield scrapy.Request(poi_url,
                                 meta={'adname':poi.get('adname') or None},
                                 callback=self.parse_target_poi)


        #检查是否有下一页
        # if query_para.get('page'):
        #     current_page = int(query_para['page'])
        # else:
        #     current_page = 1
        current_page = query_para.get('page') or 1
        current_poi_num = (int(current_page)-1)*int(query_para['offset']) + \
            len(res['pois'])
        logger.debug('当前页面为%s，当前poi数量为%s，返回的count数为%s'%(current_page,current_poi_num,res['count']))
        if current_poi_num < int(res['count']):
            query_para['page'] = int(current_page)+1
            url = '%s?%s'%(_url,parse.urlencode(query_para))
            logger.debug('生成下一页：%s'%url)
            yield scrapy.Request(url,callback=self.parse_region_pois)

    def parse_target_poi(self,response):
        """
        解析目标POI的response，并保存需要的信息到items
        :param response:
        :return:
        """
        res = json.loads(response.text)
        item = PoiInfoItem()
        logger.debug('边界搜索url：%s\nresponse:%s'%(response.url,response.text))
        try:
            base = res['data']['base']
            item['id'] = base['poiid']
            item['province'] = 'NULL'
            item['city'] = base['city_name']
            item['name'] = base['name']
            item['city_adcode'] = base['city_adcode']
            item['address'] = base['address']
            # item['district'] = base.get('bcs','NULL')
            item['district'] = response.request.meta['adname']
            item['center_long'] = float(base['x'])
            item['center_lat'] = float(base['y'])
            item['type'] = base['new_keytype']
            item['typecode'] = base['new_type']
            item['classify'] = base['classify']
            item['area'] = base.get('geodata',{}).get('aoi',[{}])[0].get('area') or 0
            item['shape'] = res['data'].get('spec',{}).get('mining_shape',{}).get('shape') or 'NULL'
            yield item
            self.items_crawled+=1

        except:
            logger.debug('获取详情有误')


    def next_key(self):
        """
        每次换一次key
        :return:
        """
        _k = next(self.keys)
        logger.debug('使用下一个key:%s'%_k)
        return _k

    def _next_key(self):
        """
        key的迭代器
        :return:
        """
        for k in KEYS:
            yield k
